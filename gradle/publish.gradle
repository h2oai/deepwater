apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: "signing"

// Default task to bundle sources code as jar
task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

// Container for generated POMs (by default added into archive configuration)
configurations {
    pom {
        transitive = false
    }
}

configurations {
    toPublish
}

artifacts {
    toPublish sourcesJar
}

task signAll(type : Sign) {
    sign configurations.archives
    // Sign additional artifacts
    sign configurations.toPublish
    // Sign only in case of release
    required = true //project.ext.isRelease || project.hasProperty("doSignAll")
}

//
// Record all generated POM files for given publishing task
//
project.tasks.whenTaskAdded({ t ->
    // This is adhoc specific task for defined publication
    if (t.name.contains('generatePomFileForMavenAll')) {
        t.doLast({ tt ->
            artifacts {
                pom file(t.destination)
            }
        })
    }
})

// This is part of publish module responsible by putting jars into local Ivy cache
// The code is here to support Spark assembly which expects modules in local Ivy cache
publishing {
  publications {

      mavenAll(MavenPublication) {
          artifactId project.name

          version "${project.version}"

          // Publish all artifacts
          // NOTE: needs to be here to create a POM file with correct dependencies
          from components.java

          // Publish additional artifacts as documentaiton or source code
          configurations.toPublish.allArtifacts.each { art ->
              logger.debug("Publishing artifact for: " + art)
              artifact art
          }

          if (signAll.required) {
              signAll.signatures.all { Signature signature ->
                  logger.debug("Publishing signature for: " + signature.file + ", type=" + signature.type)
                  artifact(signature, new Action<MavenArtifact>() {
                      @Override
                      void execute(MavenArtifact t) {
                          t.classifier = signature.toSignArtifact.classifier != "" ? signature.toSignArtifact.classifier : null
                          t.extension = signature.type == "xml.asc" ? "pom.asc" : signature.type
                      }
                  })
              }
          }

          pom.withXml { provider ->
                def h2oPOM = {
                  // See https://discuss.gradle.org/t/some-elements-are-removed-when-generate-a-pom-xml-using-the-maven-publish-plugin/2073/4
                  resolveStrategy = Closure.DELEGATE_FIRST
                  name project.name
                  description project.description
                  url 'https://github.com/h2oai/deepwater'
                  inceptionYear '2016'

                  organization {
                      name 'H2O.ai'
                      url  'http://h2o.ai/'
                  }

                  // H2O licensing
                  licenses {
                      license {
                          name 'The Apache Software License, Version 2.0'
                          url  'http://www.apache.org/licenses/LICENSE-2.0.txt'
                          distribution 'repo'
                      }
                  }

                  // Info for contributors
                  scm {
                      url        'https://github.com/h2oai/deepwater'
                      connection 'scm:git:https://github.com/h2oai/deepwater.git'
                      developerConnection 'scm:git:git@github.com:h2oai/deepwater.git'
                  }

                  // Public H2O JIRA for issue management
                  issueManagement {
                      system 'Jira'
                      url    'http://jira.h2o.ai'
                  }
                  // Developer information
                  developers {
                      developer {
                          id 'oss'
                          name 'Open Source Google Group'
                          email 'https://groups.google.com/forum/#!forum/h2ostream'
                      }
                  }
              }
              // Append basic POM information
              provider.asNode().children().last() + h2oPOM
          }
      }
  }

  repositories {
      maven {
          name "BuildRepo"
          url "$rootDir/build/repo"
      }

      if (project.ext.isRelease) {
          maven {
              name "SonatypeRelease"
              url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"

              credentials {
                  username project["oss-releases.username"]
                  password project["oss-releases.password"]
              }
          }
      }
  }
}

